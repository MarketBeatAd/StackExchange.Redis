abstract StackExchange.Redis.Protocol.RespRequest.Write(ref StackExchange.Redis.Protocol.Resp2Writer writer) -> void
const StackExchange.Redis.Protocol.Resp2Writer.MaxBytesInt32 = 17 -> int
const StackExchange.Redis.Protocol.Resp2Writer.MaxBytesInt64 = 26 -> int
const StackExchange.Redis.Protocol.Resp2Writer.MaxBytesSingle = 27 -> int
override StackExchange.Redis.Protocol.LeasedSequence<T>.ToString() -> string!
override StackExchange.Redis.Protocol.OpaqueChunk.Equals(object? obj) -> bool
override StackExchange.Redis.Protocol.OpaqueChunk.GetHashCode() -> int
override StackExchange.Redis.Protocol.OpaqueChunk.ToString() -> string!
StackExchange.Redis.Protocol.LeasedSequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.AddRef() -> void
StackExchange.Redis.Protocol.LeasedSequence<T>.Dispose() -> void
StackExchange.Redis.Protocol.LeasedSequence<T>.End.get -> System.SequencePosition
StackExchange.Redis.Protocol.LeasedSequence<T>.First.get -> System.ReadOnlyMemory<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.FirstSpan.get -> System.ReadOnlySpan<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.GetEnumerator() -> System.Buffers.ReadOnlySequence<T>.Enumerator
StackExchange.Redis.Protocol.LeasedSequence<T>.GetPosition(long offset) -> System.SequencePosition
StackExchange.Redis.Protocol.LeasedSequence<T>.GetPosition(long offset, System.SequencePosition origin) -> System.SequencePosition
StackExchange.Redis.Protocol.LeasedSequence<T>.IsEmpty.get -> bool
StackExchange.Redis.Protocol.LeasedSequence<T>.IsSingleSegment.get -> bool
StackExchange.Redis.Protocol.LeasedSequence<T>.LeasedSequence() -> void
StackExchange.Redis.Protocol.LeasedSequence<T>.LeasedSequence(System.Buffers.ReadOnlySequence<T> value) -> void
StackExchange.Redis.Protocol.LeasedSequence<T>.Length.get -> long
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(int start, int length) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(int start, System.SequencePosition end) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(long start) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(long start, long length) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(long start, System.SequencePosition end) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(System.SequencePosition start) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(System.SequencePosition start, int length) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(System.SequencePosition start, long length) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Slice(System.SequencePosition start, System.SequencePosition end) -> System.Buffers.ReadOnlySequence<T>
StackExchange.Redis.Protocol.LeasedSequence<T>.Start.get -> System.SequencePosition
StackExchange.Redis.Protocol.LeasedSequence<T>.TryGet(ref System.SequencePosition position, out System.ReadOnlyMemory<T> memory, bool advance = true) -> bool
StackExchange.Redis.Protocol.OpaqueChunk
StackExchange.Redis.Protocol.OpaqueChunk.Equals(StackExchange.Redis.Protocol.OpaqueChunk other) -> bool
StackExchange.Redis.Protocol.OpaqueChunk.GetBuffer() -> System.Buffers.ReadOnlySequence<byte>
StackExchange.Redis.Protocol.OpaqueChunk.Length.get -> long
StackExchange.Redis.Protocol.OpaqueChunk.OpaqueChunk() -> void
StackExchange.Redis.Protocol.OpaqueChunk.Recycle() -> void
StackExchange.Redis.Protocol.OpaqueChunk.TryGetSpan(out System.ReadOnlySpan<byte> span) -> bool
StackExchange.Redis.Protocol.OpaqueChunk.WithoutPreamble() -> StackExchange.Redis.Protocol.OpaqueChunk
StackExchange.Redis.Protocol.OpaqueChunk.WithPreamble(System.ReadOnlySpan<byte> value) -> StackExchange.Redis.Protocol.OpaqueChunk
StackExchange.Redis.Protocol.Resp2Writer
StackExchange.Redis.Protocol.Resp2Writer.Resp2Writer() -> void
StackExchange.Redis.Protocol.Resp2Writer.Resp2Writer(int preambleReservation) -> void
StackExchange.Redis.Protocol.Resp2Writer.WriteCommand(scoped System.ReadOnlySpan<byte> command, int argCount, int argBytesEstimate = 0) -> void
StackExchange.Redis.Protocol.Resp2Writer.WriteCommand(scoped System.ReadOnlySpan<char> command, int argCount, int argBytesEstimate = 0) -> void
StackExchange.Redis.Protocol.Resp2Writer.WriteCommand(string! command, int argCount, int argBytesEstimate = 0) -> void
StackExchange.Redis.Protocol.Resp2Writer.WriteValue(scoped System.ReadOnlySpan<byte> value) -> void
StackExchange.Redis.Protocol.Resp2Writer.WriteValue(scoped System.ReadOnlySpan<char> value) -> void
StackExchange.Redis.Protocol.Resp2Writer.WriteValue(string! value) -> void
StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Array = 42 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.BigNumber = 40 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Boolean = 35 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.BulkError = 33 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.BulkString = 36 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Double = 44 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Integer = 58 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Map = 37 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.None = 0 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Null = 95 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Push = 62 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.Set = 126 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.SimpleError = 45 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.SimpleString = 43 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespPrefix.VerbatimString = 61 -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespReader
StackExchange.Redis.Protocol.RespReader.BytesConsumed.get -> long
StackExchange.Redis.Protocol.RespReader.ChildCount.get -> int
StackExchange.Redis.Protocol.RespReader.IsNull() -> bool
StackExchange.Redis.Protocol.RespReader.Length.get -> int
StackExchange.Redis.Protocol.RespReader.LongLength.get -> long
StackExchange.Redis.Protocol.RespReader.Prefix.get -> StackExchange.Redis.Protocol.RespPrefix
StackExchange.Redis.Protocol.RespReader.ReadNext() -> bool
StackExchange.Redis.Protocol.RespReader.RespReader() -> void
StackExchange.Redis.Protocol.RespReader.RespReader(System.Buffers.ReadOnlySequence<byte> value) -> void
StackExchange.Redis.Protocol.RespReader.RespReader(System.ReadOnlyMemory<byte> value) -> void
StackExchange.Redis.Protocol.RespRequest
StackExchange.Redis.Protocol.RespRequest.RespRequest() -> void
StackExchange.Redis.Protocol.RespSource
StackExchange.Redis.Protocol.RespSource.ReadNextAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<StackExchange.Redis.Protocol.LeasedSequence<byte>>
static StackExchange.Redis.Protocol.LeasedSequence<T>.implicit operator System.Buffers.ReadOnlySequence<T>(StackExchange.Redis.Protocol.LeasedSequence<T> value) -> System.Buffers.ReadOnlySequence<T>
static StackExchange.Redis.Protocol.Resp2Writer.EstimateSize(byte[]! value) -> int
static StackExchange.Redis.Protocol.Resp2Writer.EstimateSize(int value) -> int
static StackExchange.Redis.Protocol.Resp2Writer.EstimateSize(scoped System.ReadOnlySpan<byte> value) -> int
static StackExchange.Redis.Protocol.Resp2Writer.EstimateSize(scoped System.ReadOnlySpan<char> value) -> int
static StackExchange.Redis.Protocol.Resp2Writer.EstimateSize(string! value) -> int
static StackExchange.Redis.Protocol.Resp2Writer.EstimateSize(uint value) -> int
static StackExchange.Redis.Protocol.Resp2Writer.EstimateSize(ulong value) -> int
static StackExchange.Redis.Protocol.RespSource.Create(System.IO.Stream! source) -> StackExchange.Redis.Protocol.RespSource!
virtual StackExchange.Redis.Protocol.RespSource.DisposeAsync() -> System.Threading.Tasks.ValueTask